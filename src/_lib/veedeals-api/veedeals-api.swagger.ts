/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.0.6306.29915 (NJsonSchema v8.30.6304.31883) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class HomeClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(): Observable<Blob> {
        let url_ = this.baseUrl + "/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<Blob>><any>Observable.throw(e);
                }
            } else
                return <Observable<Blob>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<Blob | null> {
        const _status = _response.status; 

        if (_status === 200) {
            return Observable.of(_response.blob());
        } else if (_status !== 200 && _status !== 204) {
            return blobToText(_response.blob()).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Observable.of(null);
    }

    login(username: string, password: string): Observable<Blob> {
        let url_ = this.baseUrl + "/login?";
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        if (password === undefined)
            throw new Error("The parameter 'password' must be defined.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processLogin(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processLogin(_response);
                } catch (e) {
                    return <Observable<Blob>><any>Observable.throw(e);
                }
            } else
                return <Observable<Blob>><any>Observable.throw(_response);
        });
    }

    protected processLogin(_response: Response): Observable<Blob | null> {
        const _status = _response.status; 

        if (_status === 200) {
            return Observable.of(_response.blob());
        } else if (_status !== 200 && _status !== 204) {
            return blobToText(_response.blob()).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Observable.of(null);
    }

    logout(): Observable<Blob> {
        let url_ = this.baseUrl + "/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            responseType: ResponseContentType.Blob,
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processLogout(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processLogout(_response);
                } catch (e) {
                    return <Observable<Blob>><any>Observable.throw(e);
                }
            } else
                return <Observable<Blob>><any>Observable.throw(_response);
        });
    }

    protected processLogout(_response: Response): Observable<Blob | null> {
        const _status = _response.status; 

        if (_status === 200) {
            return Observable.of(_response.blob());
        } else if (_status !== 200 && _status !== 204) {
            return blobToText(_response.blob()).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", _status, _responseText);
            });
        }
        return Observable.of(null);
    }
}

@Injectable()
export class CustomersClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(): Observable<CustomerResult[]> {
        let url_ = this.baseUrl + "/customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<CustomerResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerResult[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<CustomerResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: CustomerResult[] | null = null;
            result200 = _responseText === "" ? null : <CustomerResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<CustomerResult> {
        let url_ = this.baseUrl + "/customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<CustomerResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerResult>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<CustomerResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: CustomerResult | null = null;
            result200 = _responseText === "" ? null : <CustomerResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

@Injectable()
export class DealsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(isPublished: boolean, merchantId: string, includeMerchant: boolean): Observable<DealResult[]> {
        let url_ = this.baseUrl + "/deals?";
        if (isPublished !== undefined)
            url_ += "isPublished=" + encodeURIComponent("" + isPublished) + "&"; 
        if (merchantId !== undefined)
            url_ += "merchantId=" + encodeURIComponent("" + merchantId) + "&"; 
        if (includeMerchant === null)
            throw new Error("The parameter 'includeMerchant' cannot be null.");
        else if (includeMerchant !== undefined)
            url_ += "includeMerchant=" + encodeURIComponent("" + includeMerchant) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<DealResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<DealResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: DealResult[] | null = null;
            result200 = _responseText === "" ? null : <DealResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    create(create: DealCreate): Observable<DealResult> {
        let url_ = this.baseUrl + "/deals";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(create);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processCreate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processCreate(_response);
                } catch (e) {
                    return <Observable<DealResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult>><any>Observable.throw(_response);
        });
    }

    protected processCreate(_response: Response): Observable<DealResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: DealResult | null = null;
            result200 = _responseText === "" ? null : <DealResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<DealResult> {
        let url_ = this.baseUrl + "/deals/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<DealResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<DealResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: DealResult | null = null;
            result200 = _responseText === "" ? null : <DealResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    update(id: string, update: DealUpdate): Observable<DealResult> {
        let url_ = this.baseUrl + "/deals/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(update);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processUpdate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processUpdate(_response);
                } catch (e) {
                    return <Observable<DealResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult>><any>Observable.throw(_response);
        });
    }

    protected processUpdate(_response: Response): Observable<DealResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: DealResult | null = null;
            result200 = _responseText === "" ? null : <DealResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    delete(id: string): Observable<null> {
        let url_ = this.baseUrl + "/deals/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processDelete(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processDelete(_response);
                } catch (e) {
                    return <Observable<null>><any>Observable.throw(e);
                }
            } else
                return <Observable<null>><any>Observable.throw(_response);
        });
    }

    protected processDelete(_response: Response): Observable<null | null> {
        const _status = _response.status; 

        if (_status === 303) {
            const _responseText = _response.text();
            return throwException("A server error occurred.", _status, _responseText);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    listPublished(isPublished: boolean, merchantId: string, includeMerchant: boolean): Observable<DealResult[]> {
        let url_ = this.baseUrl + "/deals/published?";
        if (isPublished !== undefined)
            url_ += "isPublished=" + encodeURIComponent("" + isPublished) + "&"; 
        if (merchantId !== undefined)
            url_ += "merchantId=" + encodeURIComponent("" + merchantId) + "&"; 
        if (includeMerchant === null)
            throw new Error("The parameter 'includeMerchant' cannot be null.");
        else if (includeMerchant !== undefined)
            url_ += "includeMerchant=" + encodeURIComponent("" + includeMerchant) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processListPublished(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processListPublished(_response);
                } catch (e) {
                    return <Observable<DealResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult[]>><any>Observable.throw(_response);
        });
    }

    protected processListPublished(_response: Response): Observable<DealResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: DealResult[] | null = null;
            result200 = _responseText === "" ? null : <DealResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    publish(id: string): Observable<DealResult> {
        let url_ = this.baseUrl + "/deals/published/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processPublish(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processPublish(_response);
                } catch (e) {
                    return <Observable<DealResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<DealResult>><any>Observable.throw(_response);
        });
    }

    protected processPublish(_response: Response): Observable<DealResult | null> {
        const _status = _response.status; 

        if (_status === 204) {
            const _responseText = _response.text();
            let result204: DealResult | null = null;
            result204 = _responseText === "" ? null : <DealResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result204);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

@Injectable()
export class MerchantsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(): Observable<MerchantResult[]> {
        let url_ = this.baseUrl + "/merchants";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<MerchantResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<MerchantResult[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<MerchantResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: MerchantResult[] | null = null;
            result200 = _responseText === "" ? null : <MerchantResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    create(create: MerchantCreate): Observable<MerchantResult> {
        let url_ = this.baseUrl + "/merchants";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(create);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processCreate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processCreate(_response);
                } catch (e) {
                    return <Observable<MerchantResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<MerchantResult>><any>Observable.throw(_response);
        });
    }

    protected processCreate(_response: Response): Observable<MerchantResult | null> {
        const _status = _response.status; 

        if (_status === 201) {
            const _responseText = _response.text();
            let result201: MerchantResult | null = null;
            result201 = _responseText === "" ? null : <MerchantResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result201);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<MerchantResult> {
        let url_ = this.baseUrl + "/merchants/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<MerchantResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<MerchantResult>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<MerchantResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: MerchantResult | null = null;
            result200 = _responseText === "" ? null : <MerchantResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    update(id: string, update: MerchantUpdate): Observable<MerchantResult> {
        let url_ = this.baseUrl + "/merchants/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(update);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processUpdate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processUpdate(_response);
                } catch (e) {
                    return <Observable<MerchantResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<MerchantResult>><any>Observable.throw(_response);
        });
    }

    protected processUpdate(_response: Response): Observable<MerchantResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: MerchantResult | null = null;
            result200 = _responseText === "" ? null : <MerchantResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

@Injectable()
export class PurchasesClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(customerId: string): Observable<PurchaseResult[]> {
        let url_ = this.baseUrl + "/purchases?";
        if (customerId === null)
            throw new Error("The parameter 'customerId' cannot be null.");
        else if (customerId !== undefined)
            url_ += "customerId=" + encodeURIComponent("" + customerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<PurchaseResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PurchaseResult[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<PurchaseResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: PurchaseResult[] | null = null;
            result200 = _responseText === "" ? null : <PurchaseResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    create(create: PurchaseResourceCreate): Observable<PurchaseResult> {
        let url_ = this.baseUrl + "/purchases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(create);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processCreate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processCreate(_response);
                } catch (e) {
                    return <Observable<PurchaseResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<PurchaseResult>><any>Observable.throw(_response);
        });
    }

    protected processCreate(_response: Response): Observable<PurchaseResult | null> {
        const _status = _response.status; 

        if (_status === 201) {
            const _responseText = _response.text();
            let result201: PurchaseResult | null = null;
            result201 = _responseText === "" ? null : <PurchaseResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result201);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<PurchaseResult> {
        let url_ = this.baseUrl + "/purchases/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<PurchaseResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<PurchaseResult>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<PurchaseResult | null> {
        const _status = _response.status; 

        if (_status === 201) {
            const _responseText = _response.text();
            let result201: PurchaseResult | null = null;
            result201 = _responseText === "" ? null : <PurchaseResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result201);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

@Injectable()
export class RedemptionsClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(): Observable<VoucherRedemptionResource[]> {
        let url_ = this.baseUrl + "/redemptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<VoucherRedemptionResource[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherRedemptionResource[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<VoucherRedemptionResource[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: VoucherRedemptionResource[] | null = null;
            result200 = _responseText === "" ? null : <VoucherRedemptionResource[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    create(request: VoucherRedemptionRequest): Observable<VoucherRedemptionResource> {
        let url_ = this.baseUrl + "/redemptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processCreate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processCreate(_response);
                } catch (e) {
                    return <Observable<VoucherRedemptionResource>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherRedemptionResource>><any>Observable.throw(_response);
        });
    }

    protected processCreate(_response: Response): Observable<VoucherRedemptionResource | null> {
        const _status = _response.status; 

        if (_status === 204) {
            const _responseText = _response.text();
            let result204: VoucherRedemptionResource | null = null;
            result204 = _responseText === "" ? null : <VoucherRedemptionResource>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result204);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<VoucherRedemptionResource> {
        let url_ = this.baseUrl + "/redemptions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<VoucherRedemptionResource>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherRedemptionResource>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<VoucherRedemptionResource | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: VoucherRedemptionResource | null = null;
            result200 = _responseText === "" ? null : <VoucherRedemptionResource>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

@Injectable()
export class VouchersClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    index(merchantId: string, customerId: string, includeRedeemed: boolean): Observable<VoucherResult[]> {
        let url_ = this.baseUrl + "/vouchers?";
        if (merchantId !== undefined)
            url_ += "merchantId=" + encodeURIComponent("" + merchantId) + "&"; 
        if (customerId !== undefined)
            url_ += "customerId=" + encodeURIComponent("" + customerId) + "&"; 
        if (includeRedeemed === null)
            throw new Error("The parameter 'includeRedeemed' cannot be null.");
        else if (includeRedeemed !== undefined)
            url_ += "includeRedeemed=" + encodeURIComponent("" + includeRedeemed) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processIndex(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processIndex(_response);
                } catch (e) {
                    return <Observable<VoucherResult[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherResult[]>><any>Observable.throw(_response);
        });
    }

    protected processIndex(_response: Response): Observable<VoucherResult[] | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: VoucherResult[] | null = null;
            result200 = _responseText === "" ? null : <VoucherResult[]>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    create(create: VoucherCreate): Observable<VoucherResult> {
        let url_ = this.baseUrl + "/vouchers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(create);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processCreate(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processCreate(_response);
                } catch (e) {
                    return <Observable<VoucherResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherResult>><any>Observable.throw(_response);
        });
    }

    protected processCreate(_response: Response): Observable<VoucherResult | null> {
        const _status = _response.status; 

        if (_status === 204) {
            const _responseText = _response.text();
            let result204: VoucherResult | null = null;
            result204 = _responseText === "" ? null : <VoucherResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result204);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    get(id: string): Observable<VoucherResult> {
        let url_ = this.baseUrl + "/vouchers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).map((_response) => {
            return this.processGet(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processGet(_response);
                } catch (e) {
                    return <Observable<VoucherResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<VoucherResult>><any>Observable.throw(_response);
        });
    }

    protected processGet(_response: Response): Observable<VoucherResult | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: VoucherResult | null = null;
            result200 = _responseText === "" ? null : <VoucherResult>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

export interface CustomerResult {
    id?: string | undefined;
}

export interface DealResult {
    id: string;
    name?: string | undefined;
    price: number;
    originalPrice: number;
    minimumPurchases?: number | undefined;
    maximumPurchases?: number | undefined;
    validFrom: Date;
    validTo: Date;
    merchantId: string;
    merchant?: MerchantResult | undefined;
}

export interface MerchantResult {
    id: string;
    name?: string | undefined;
}

export interface DealCreate {
    name?: string | undefined;
    price: number;
    originalPrice: number;
    minimumPurchases?: number | undefined;
    maximumPurchases?: number | undefined;
    validFrom: Date;
    validTo: Date;
    merchantId: string;
}

export interface DealUpdate {
    name?: string | undefined;
    price: number;
    originalPrice: number;
    minimumPurchases?: number | undefined;
    maximumPurchases?: number | undefined;
    validFrom: Date;
    validTo: Date;
}

export interface MerchantCreate {
    name?: string | undefined;
}

export interface MerchantUpdate {
    name?: string | undefined;
}

export interface PurchaseResult {
    id: string;
    customerId?: string | undefined;
    customer?: CustomerResult | undefined;
    voucherId: string;
    voucher?: VoucherResult | undefined;
    purchased: Date;
}

export interface VoucherResult {
    id: string;
    customerId: string;
    customer?: CustomerResult | undefined;
    dealId: string;
    deal?: DealResult | undefined;
    redeemableBefore: Date;
}

export interface PurchaseResourceCreate {
    dealId: string;
    paymentData?: { [key: string] : any; } | undefined;
}

export interface VoucherRedemptionResource {
    id: string;
}

export interface VoucherRedemptionRequest {
    voucherId: string;
}

export interface VoucherCreate {
    customerId: string;
    dealId: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable((observer) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}